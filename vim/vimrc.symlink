" make sure Vi-compatibility mode is off so we can use Vim features
set nocompatible

" enable file type based indent configuration
filetype plugin indent on

" enable syntax highlighting
syntax on

" source Vundle config file (this line should be at beginning of vimrc)
if isdirectory(expand("$VUNDLE"))
  source $DOTFILES/vim/vundle.vim
endif

" alias '\l' to toggle line numbers
noremap \l :set number!<CR>

" alias '\p' to toggle paste mode
noremap \p :set paste!<CR>

" alias better commands for split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" enable highlighting search results
set hlsearch

" alias '\h' to hide the highlight from the previous search
noremap \h :nohlsearch<CR>

" put spaces instead of tabs
set expandtab

function! TabWidth(width)
    let &tabstop=a:width
    let &softtabstop=a:width
    let &shiftwidth=a:width
endfunction
command! -nargs=1 TabWidth call TabWidth(<f-args>)

" set indent width
let defaultwidth=2
call TabWidth(defaultwidth)

" use solarized theme on mac and linux
if has("unix")
  syntax enable
  set background=dark
  colorscheme solarized
endif

" switch between dark and light background
fun! ToggleBackgroundColor()
  if &background == 'dark'
    let &background = 'light'
  else
    let &background = 'dark'
  endif
  " TODO: for some reason we have to do the lineno highlight all over again
  highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
endfun
command! ToggleBackgroundColor call ToggleBackgroundColor()

" show line numbers and make them grey
set number
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" highlight current line (can cause vim to respond slowly on large files)
set cursorline

" show line and column number in bottom right of screen
set ruler

" show vertical line at column 80
set colorcolumn=80
highlight ColorColumn term=bold cterm=NONE ctermfg=NONE ctermbg=DarkGrey gui=NONE guifg=NONE guibg=DarkGrey

" show name of function under cursor on '\f'
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map \f :call ShowFuncName() <CR>

" make netrw list files and directories as a tree
let g:netrw_liststyle=3

" show status bar with filename
set laststatus=2
set statusline=%f

" keep the cursor offset from the top/bottom of the screen when scrolling
set scrolloff=2
