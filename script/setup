#!/bin/bash

DOTFILES=$HOME/.dotfiles

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m...\033[0m ] $1\n"
}

user () {
  printf "\r  [  \033[0;33m?\033[0m  ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK \033[0m ] $1\n"
}

error () {
  printf "\r\033[2K  [\033[0;31mERROR\033[0m] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  OUTPUT_FILE=$DOTFILES/git/gitconfig.symlink
  TEMPLATE_FILE=$OUTPUT_FILE.template

  if [ ! -f $OUTPUT_FILE ]
  then

    info "Setting up gitconfig..."
    if [ -f $TEMPLATE_FILE ]
    then
      git_credential='cache'
      if [ "$(uname -s)" == "Darwin" ]
      then
        git_credential='osxkeychain'
      fi

      user ' - What is your github author name?'
      read -e git_authorname
      user ' - What is your github author email?'
      read -e git_authoremail

      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $TEMPLATE_FILE > $OUTPUT_FILE

      success 'gitconfig created'
    else
      error "Could not create gitconfig. Template file, $TEMPLATE_FILE, does not exist"
    fi
    echo ''
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'Installing dotfiles...'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source/%.symlink/}\"`"   #this uses bash search and replace

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File `basename $dest` already exists. What do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

echo ''
echo '  Setup complete!'
